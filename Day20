package Arrays;

public class MissingNumber {
	
	
//	Time Complexity: O(N2)
	//Space Complexity: O(1) 
//    public static int missingNumber(int []a,int N) {
//    	
//    	for(int i=1;i<=N;i++) {
//    		
//    		int flag =0;
//    		  //Search the element using linear search:
//            for (int j = 0; j < N - 1; j++) {
//                if (a[j] == i) {
//
//                    // i is present in the array:
//                    flag = 1;
//                    break;
//                }
//            }
//
//            // check if the element is missing
//            //i.e flag == 0:
//
//            if (flag == 0) return i;
//        }
//
//        // The following line will never execute.
//        // It is just to avoid warnings.
//        return -1;
//    		
	
	
	
//	Time Complexity: O(N),
//	Space Complexity: O(1)
//	public static int missingNumber(int []a, int N) {
//
//        //Summation of first N numbers:
//        int sum = (N * (N + 1)) / 2;
//
//        //Summation of all array elements:
//        int s2 = 0;
//        for (int i = 0; i < N - 1; i++) {
//            s2 += a[i];
//        }
//
//        int missingNum = sum - s2;
//        return missingNum;
        
        
	
//	Time Complexity: O(N),
//	Space Complexity: O(1)
        public static int missingNumber(int []a, int N) {

            int xor1 = 0, xor2 = 0;

            for (int i = 0; i < N - 1; i++) {
                xor2 = xor2 ^ a[i]; // XOR of array elements
                xor1 = xor1 ^ (i + 1); //XOR up to [1...N-1]
            }
            xor1 = xor1 ^ N; //XOR up to [1...N]

            return (xor1 ^ xor2); // the missing number
        
    	}
    
    
    
	public static void main(String[] args) {
	  int n =5;
	  int a[]= {1,2,4,5};
	  
	  int ans= missingNumber(a,n);
	  System.out.println("The missing number is :" + ans);

	}

}

package Arrays;
import java.util.*;

//TIme Complexity :O((m+n)log(m+n))
//Space complexity :O(m+n)
public class UnionOfTwoSortedArrays {
	
//	static ArrayList<Integer> FindUnion(int arr1[],int arr2[], int n, int m){
//		HashMap<Integer,Integer> freq = new HashMap<>();
//		ArrayList<Integer> Union = new ArrayList<>();
//		for(int i=0;i<n;i++) {
//			freq.put(arr1[i], freq.getOrDefault(arr1[i],0)+1);
//			
//		}
//		for(int i=0;i<m;i++) 
//			freq.put(arr2[i],freq.getOrDefault(arr2[i],0)+1);
//			for(int it:freq.keySet())
//				Union.add(it);
//		
//		return Union;	
	
//	Time Compeleixty : O( (m+n)log(m+n) ) 
//	Space Complexity : O(m+n)
//	static ArrayList<Integer> FindUnion(int arr1[],int arr2[],int n ,int m){
//		HashSet<Integer> s = new HashSet<>();
//		ArrayList<Integer> Union= new ArrayList<>();
//		for(int i=0;i<n;i++)
//			s.add(arr1[i]);
//		for(int i=0;i<m;i++) 
//		s.add(arr2[i]);
//		for(int it:s)
//			Union.add(it);
//		return Union;
//}

	//Time Complexity: O(m+n)
	//Space Complexity : O(m+n)
	static ArrayList<Integer> FindUnion(int arr1[], int arr2[], int n, int m) {
		   int i = 0, j = 0; // pointers
		  ArrayList<Integer > Union=new ArrayList<>(); // Uninon vector
		  while (i < n && j < m) {
		    if (arr1[i] <= arr2[j]) // Case 1 and 2
		    {
		      if (Union.size() == 0 || Union.get(Union.size()-1) != arr1[i])
		        Union.add(arr1[i]);
		      i++;
		    } else // case 3
		    {
		      if (Union.size() == 0 || Union.get(Union.size()-1) != arr2[j])
		        Union.add(arr2[j]);
		      j++;
		    }
		  }
		  while (i < n) // IF any element left in arr1
		  {
		    if (Union.get(Union.size()-1) != arr1[i])
		      Union.add(arr1[i]);
		    i++;
		  }
		  while (j < m) // If any elements left in arr2
		  {
		    if (Union.get(Union.size()-1) != arr2[j])
		      Union.add(arr2[j]);
		    j++;
		  }
		  return Union;
	

	public static void main(String[] args) {
		int n=10,m=7;
		
		int arr1[]= {1,2,3,4,5,6,7,8,9,10};
		int arr2[]= {2,3,4,4,5,11,12};
		
		java.util.ArrayList<Integer> Union = FindUnion(arr1,arr2,n,m);
		System.out.println("Union of arr1 and arr2 is ");
		for(int val: Union)
			System.out.print(val +" ");
		

	}

}
