Partition the Array


//User function Template for Java
class Solution 
{ 
    long minDifference(int n, int A[]) 
    { 
        // code here
        long[] prefix = new long[n];
    prefix[0] = A[0];
    for (int i = 1; i < n; i++) {
        prefix[i] = prefix[i-1] + A[i];
    }
    
    long ans = Long.MAX_VALUE, w, x, y, z;
    for (int i = 2; i < n-1; i++) {
        int idx = binarysearch(prefix, 0, i-1, prefix[i-1], 0);
        w = prefix[idx];
        x = prefix[i-1] - w;
        idx = binarysearch(prefix, i, n-1, prefix[n-1], prefix[i-1]);
        y = prefix[idx] - prefix[i-1];
        z = prefix[n-1] - prefix[idx];
        ans = Math.min(ans, Math.max(Math.max(w, x), Math.max(y, z)) - Math.min(Math.min(w, x), Math.min(y, z)));
    }
    return ans;
    }
   public int binarysearch(long[] arr, int low, int high, long sum, long temp) {
    int mid, idx=-1;
    long left, right, diff=Long.MAX_VALUE;
    while (low <= high) {
        mid = (low + high) / 2;
        left = arr[mid] - temp;
        right = sum - arr[mid];
        if (Math.abs(left - right) < diff) {
            idx = mid;
            diff = Math.abs(left - right);
        }
        if (left < right) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return idx;
}
} 
